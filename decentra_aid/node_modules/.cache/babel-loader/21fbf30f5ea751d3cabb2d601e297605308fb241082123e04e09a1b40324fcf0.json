{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isMining = exports.getCoinbase = exports.isSyncing = exports.getProtocolVersion = void 0;\nexports.getHashRate = getHashRate;\nexports.getGasPrice = getGasPrice;\nexports.getMaxPriorityFeePerGas = getMaxPriorityFeePerGas;\nexports.getBlockNumber = getBlockNumber;\nexports.getBalance = getBalance;\nexports.getStorageAt = getStorageAt;\nexports.getCode = getCode;\nexports.getBlock = getBlock;\nexports.getBlockTransactionCount = getBlockTransactionCount;\nexports.getBlockUncleCount = getBlockUncleCount;\nexports.getUncle = getUncle;\nexports.getTransaction = getTransaction;\nexports.getPendingTransactions = getPendingTransactions;\nexports.getTransactionFromBlock = getTransactionFromBlock;\nexports.getTransactionReceipt = getTransactionReceipt;\nexports.getTransactionCount = getTransactionCount;\nexports.sendTransaction = sendTransaction;\nexports.sendSignedTransaction = sendSignedTransaction;\nexports.sign = sign;\nexports.signTransaction = signTransaction;\nexports.call = call;\nexports.estimateGas = estimateGas;\nexports.getLogs = getLogs;\nexports.getChainId = getChainId;\nexports.getProof = getProof;\nexports.getFeeHistory = getFeeHistory;\nexports.createAccessList = createAccessList;\nexports.signTypedData = signTypedData;\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nconst web3_types_1 = require(\"web3-types\");\nconst web3_core_1 = require(\"web3-core\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_rpc_methods_1 = require(\"web3-rpc-methods\");\nconst decode_signed_transaction_js_1 = require(\"./utils/decode_signed_transaction.js\");\nconst schemas_js_1 = require(\"./schemas.js\");\n// eslint-disable-next-line import/no-cycle\nconst transaction_builder_js_1 = require(\"./utils/transaction_builder.js\");\nconst format_transaction_js_1 = require(\"./utils/format_transaction.js\");\n// eslint-disable-next-line import/no-cycle\nconst try_send_transaction_js_1 = require(\"./utils/try_send_transaction.js\");\n// eslint-disable-next-line import/no-cycle\nconst wait_for_transaction_receipt_js_1 = require(\"./utils/wait_for_transaction_receipt.js\");\nconst constants_js_1 = require(\"./constants.js\");\n// eslint-disable-next-line import/no-cycle\nconst send_tx_helper_js_1 = require(\"./utils/send_tx_helper.js\");\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst getProtocolVersion = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getProtocolVersion(web3Context.requestManager);\n});\nexports.getProtocolVersion = getProtocolVersion;\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst isSyncing = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getSyncing(web3Context.requestManager);\n});\nexports.isSyncing = isSyncing;\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst getCoinbase = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getCoinbase(web3Context.requestManager);\n});\nexports.getCoinbase = getCoinbase;\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst isMining = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getMining(web3Context.requestManager);\n});\nexports.isMining = isMining;\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getHashRate(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getGasPrice(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getMaxPriorityFeePerGas(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getBlockNumber(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBalance(web3Context_1, address_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getStorageAt(web3Context_1, address_1, storageSlot_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, address, storageSlot, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const storageSlotFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, storageSlot, web3_types_1.ETH_DATA_FORMAT);\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getCode(web3Context_1, address_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlock(web3Context_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, hydrated = false, returnFormat) {\n    var _a;\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n    }\n    const res = (0, web3_utils_1.format)(schemas_js_1.blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    if (!(0, web3_validator_1.isNullish)(res)) {\n      const result = Object.assign(Object.assign({}, res), {\n        transactions: (_a = res.transactions) !== null && _a !== void 0 ? _a : []\n      });\n      return result;\n    }\n    return res;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockTransactionCount(web3Context_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, returnFormat) {\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockUncleCount(web3Context_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, returnFormat) {\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getUncle(web3Context_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, uncleIndex, returnFormat) {\n    const uncleIndexFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, uncleIndex, web3_types_1.ETH_DATA_FORMAT);\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n    }\n    return (0, web3_utils_1.format)(schemas_js_1.blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransaction(web3Context_1, transactionHash_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, transactionHash, returnFormat = web3Context.defaultReturnFormat) {\n    const transactionHashFormatted = (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionHash, web3_types_1.DEFAULT_RETURN_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, format_transaction_js_1.formatTransaction)(response, returnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n    return response.map(transaction => (0, format_transaction_js_1.formatTransaction)(transaction, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    }));\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionFromBlock(web3Context_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, transactionIndex, returnFormat) {\n    const transactionIndexFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, transactionIndex, web3_types_1.ETH_DATA_FORMAT);\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n    }\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, format_transaction_js_1.formatTransaction)(response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionHash, web3_types_1.DEFAULT_RETURN_FORMAT);\n    let response;\n    try {\n      response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n    } catch (error) {\n      // geth indexing error, we poll until transactions stopped indexing\n      if (typeof error === 'object' && !(0, web3_validator_1.isNullish)(error) && 'message' in error && error.message === 'transaction indexing is in progress') {\n        console.warn('Transaction indexing is in progress.');\n      } else {\n        throw error;\n      }\n    }\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionCount(web3Context_1, address_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sendTransaction(web3Context, transactionObj, returnFormat, options = {\n  checkRevertBeforeSending: true\n}, transactionMiddleware) {\n  const promiEvent = new web3_core_1.Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new send_tx_helper_js_1.SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        let transaction = Object.assign({}, transactionObj);\n        if (!(0, web3_validator_1.isNullish)(transactionMiddleware)) {\n          transaction = yield transactionMiddleware.processTransaction(transaction);\n        }\n        let transactionFormatted = (0, format_transaction_js_1.formatTransaction)(Object.assign(Object.assign({}, transaction), {\n          from: (0, transaction_builder_js_1.getTransactionFromOrToAttr)('from', web3Context, transaction),\n          to: (0, transaction_builder_js_1.getTransactionFromOrToAttr)('to', web3Context, transaction)\n        }), web3_types_1.ETH_DATA_FORMAT, {\n          transactionSchema: web3Context.config.customTransactionSchema\n        });\n        try {\n          transactionFormatted = yield sendTxHelper.populateGasPrice({\n            transaction,\n            transactionFormatted\n          });\n          yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);\n          sendTxHelper.emitSending(transactionFormatted);\n          let wallet;\n          if (web3Context.wallet && !(0, web3_validator_1.isNullish)(transactionFormatted.from)) {\n            wallet = web3Context.wallet.get(transactionFormatted.from);\n          }\n          const transactionHash = yield sendTxHelper.signAndSend({\n            wallet,\n            tx: transactionFormatted\n          });\n          const transactionHashFormatted = (0, web3_utils_1.format)({\n            format: 'bytes32'\n          }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          sendTxHelper.emitSent(transactionFormatted);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield (0, wait_for_transaction_receipt_js_1.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents((0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: transactionFormatted\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: transactionFormatted\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sendSignedTransaction(web3Context, signedTransaction, returnFormat, options = {\n  checkRevertBeforeSending: true\n}) {\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const promiEvent = new web3_core_1.Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new send_tx_helper_js_1.SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        // Formatting signedTransaction to be send to RPC endpoint\n        const signedTransactionFormattedHex = (0, web3_utils_1.format)({\n          format: 'bytes'\n        }, signedTransaction, web3_types_1.ETH_DATA_FORMAT);\n        const unSerializedTransaction = web3_eth_accounts_1.TransactionFactory.fromSerializedData((0, web3_utils_1.bytesToUint8Array)((0, web3_utils_1.hexToBytes)(signedTransactionFormattedHex)));\n        const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n          // Some providers will default `from` to address(0) causing the error\n          // reported from `eth_call` to not be the reason the user's tx failed\n          // e.g. `eth_call` will return an Out of Gas error for a failed\n          // smart contract execution contract, because the sender, address(0),\n          // has no balance to pay for the gas of the transaction execution\n          from: unSerializedTransaction.getSenderAddress().toString()\n        });\n        try {\n          const {\n              v,\n              r,\n              s\n            } = unSerializedTransactionWithFrom,\n            txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [\"v\", \"r\", \"s\"]);\n          yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);\n          sendTxHelper.emitSending(signedTransactionFormattedHex);\n          const transactionHash = yield (0, try_send_transaction_js_1.trySendTransaction)(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n          }));\n          sendTxHelper.emitSent(signedTransactionFormattedHex);\n          const transactionHashFormatted = (0, web3_utils_1.format)({\n            format: 'bytes32'\n          }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield (0, wait_for_transaction_receipt_js_1.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents((0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: unSerializedTransactionWithFrom\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: unSerializedTransactionWithFrom\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sign(web3Context_1, message_1, addressOrIndex_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, message, addressOrIndex, returnFormat = web3Context.defaultReturnFormat) {\n    var _a;\n    const messageFormatted = (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, message, web3_types_1.DEFAULT_RETURN_FORMAT);\n    if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n      const wallet = web3Context.wallet.get(addressOrIndex);\n      const signed = wallet.sign(messageFormatted);\n      return (0, web3_utils_1.format)(schemas_js_1.SignatureObjectSchema, signed, returnFormat);\n    }\n    if (typeof addressOrIndex === 'number') {\n      throw new web3_errors_1.SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n    }\n    const response = yield web3_rpc_methods_1.ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction signTransaction(web3Context_1, transaction_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, transaction, returnFormat = web3Context.defaultReturnFormat) {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.signTransaction(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }));\n    // Some clients only return the encoded signed transaction (e.g. Ganache)\n    // while clients such as Geth return the desired SignedTransactionInfoAPI object\n    return (0, web3_validator_1.isString)(response) ? (0, decode_signed_transaction_js_1.decodeSignedTransaction)(response, returnFormat, {\n      fillInputAndData: true\n    }) : {\n      raw: (0, web3_utils_1.format)({\n        format: 'bytes'\n      }, response.raw, returnFormat),\n      tx: (0, format_transaction_js_1.formatTransaction)(response.tx, returnFormat, {\n        transactionSchema: web3Context.config.customTransactionSchema,\n        fillInputAndData: true\n      })\n    };\n  });\n}\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction call(web3Context_1, transaction_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat = web3Context.defaultReturnFormat) {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.call(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }), blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction estimateGas(web3Context_1, transaction_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const transactionFormatted = (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    });\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n    if (!(0, web3_validator_1.isNullish)(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = (0, web3_utils_1.numberToHex)(toBlock);\n      }\n    }\n    if (!(0, web3_validator_1.isNullish)(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = (0, web3_utils_1.numberToHex)(fromBlock);\n      }\n    }\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return (0, web3_utils_1.format)(schemas_js_1.logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    });\n    return result;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getChainId(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    },\n    // Response is number in hex formatted string\n    response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getProof(web3Context_1, address_1, storageKeys_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, address, storageKeys, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const storageKeysFormatted = storageKeys.map(storageKey => (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, storageKey, web3_types_1.ETH_DATA_FORMAT));\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.accountSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getFeeHistory(web3Context_1, blockCount_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, blockCount, newestBlock = web3Context.defaultBlock, rewardPercentiles, returnFormat) {\n    const blockCountFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockCount, web3_types_1.ETH_DATA_FORMAT);\n    const newestBlockFormatted = (0, web3_validator_1.isBlockTag)(newestBlock) ? newestBlock : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, newestBlock, web3_types_1.ETH_DATA_FORMAT);\n    const rewardPercentilesFormatted = (0, web3_utils_1.format)({\n      type: 'array',\n      items: {\n        format: 'uint'\n      }\n    }, rewardPercentiles, constants_js_1.NUMBER_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.feeHistorySchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction createAccessList(web3Context_1, transaction_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.createAccessList(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }), blockNumberFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.accessListResultSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.signTypedData(web3Context.requestManager, address, typedData, useLegacy);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}","map":{"version":3,"names":["exports","getHashRate","getGasPrice","getMaxPriorityFeePerGas","getBlockNumber","getBalance","getStorageAt","getCode","getBlock","getBlockTransactionCount","getBlockUncleCount","getUncle","getTransaction","getPendingTransactions","getTransactionFromBlock","getTransactionReceipt","getTransactionCount","sendTransaction","sendSignedTransaction","sign","signTransaction","call","estimateGas","getLogs","getChainId","getProof","getFeeHistory","createAccessList","signTypedData","web3_types_1","require","web3_core_1","web3_utils_1","web3_eth_accounts_1","web3_validator_1","web3_errors_1","web3_rpc_methods_1","decode_signed_transaction_js_1","schemas_js_1","transaction_builder_js_1","format_transaction_js_1","try_send_transaction_js_1","wait_for_transaction_receipt_js_1","constants_js_1","send_tx_helper_js_1","getProtocolVersion","web3Context","__awaiter","ethRpcMethods","requestManager","isSyncing","getSyncing","getCoinbase","isMining","getMining","returnFormat","response","format","defaultReturnFormat","web3Context_1","address_1","address","blockNumber","defaultBlock","blockNumberFormatted","isBlockTag","ETH_DATA_FORMAT","storageSlot_1","storageSlot","storageSlotFormatted","block","hydrated","isBytes","blockHashFormatted","getBlockByHash","getBlockByNumber","res","blockSchema","isNullish","result","Object","assign","transactions","_a","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getUncleCountByBlockHash","getUncleCountByBlockNumber","uncleIndex","uncleIndexFormatted","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","transactionHash_1","transactionHash","transactionHashFormatted","DEFAULT_RETURN_FORMAT","getTransactionByHash","formatTransaction","transactionSchema","config","customTransactionSchema","fillInputAndData","map","transaction","transactionIndex","transactionIndexFormatted","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","error","message","console","warn","transactionReceiptSchema","transactionObj","options","checkRevertBeforeSending","transactionMiddleware","promiEvent","Web3PromiEvent","resolve","reject","setImmediate","sendTxHelper","SendTxHelper","processTransaction","transactionFormatted","from","getTransactionFromOrToAttr","to","populateGasPrice","emitSending","wallet","get","signAndSend","tx","emitSent","emitTransactionHash","transactionReceipt","waitForTransactionReceipt","transactionReceiptFormatted","getReceiptWithEvents","emitReceipt","handleResolve","receipt","emitConfirmation","handleError","signedTransaction","signedTransactionFormattedHex","unSerializedTransaction","TransactionFactory","fromSerializedData","bytesToUint8Array","hexToBytes","unSerializedTransactionWithFrom","toJSON","getSenderAddress","toString","v","r","s","txWithoutSigParams","__rest","trySendTransaction","sendRawTransaction","message_1","addressOrIndex_1","addressOrIndex","messageFormatted","signed","SignatureObjectSchema","SignatureError","transaction_1","isString","decodeSignedTransaction","raw","filter","toBlock","fromBlock","numberToHex","formattedFilter","logSchema","storageKeys_1","storageKeys","storageKeysFormatted","storageKey","accountSchema","blockCount_1","blockCount","newestBlock","rewardPercentiles","blockCountFormatted","newestBlockFormatted","rewardPercentilesFormatted","type","items","NUMBER_DATA_FORMAT","feeHistorySchema","accessListResultSchema","typedData","useLegacy"],"sources":["/home/ubuntu/node_modules/web3-eth/src/rpc_method_wrappers.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tSignedTransactionInfoAPI,\n\tWeb3BaseWalletAccount,\n\tAddress,\n\tBlockTag,\n\tBlockNumberOrTag,\n\tBytes,\n\tFilter,\n\tHexString,\n\tNumbers,\n\tHexStringBytes,\n\tAccountObject,\n\tBlock,\n\tFeeHistory,\n\tLog,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tAccessListResult,\n\tEip712TypedData,\n} from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport {\n\taccountSchema,\n\tblockSchema,\n\tfeeHistorySchema,\n\tlogSchema,\n\ttransactionReceiptSchema,\n\taccessListResultSchema,\n\tSignatureObjectSchema,\n} from './schemas.js';\nimport {\n\tSendSignedTransactionEvents,\n\tSendSignedTransactionOptions,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n\tTransactionMiddleware,\n} from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getProtocolVersion(web3Context.requestManager);\n\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getSyncing(web3Context.requestManager);\n\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getCoinbase(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getMining(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getHashRate<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getHashRate(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getGasPrice<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getGasPrice(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getMaxPriorityFeePerGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockNumber<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getBlockNumber(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBalance<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getBalance(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getStorageAt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tstorageSlot: Numbers,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getStorageAt(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageSlotFormatted,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'bytes' },\n\t\tresponse as Bytes,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getCode<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getCode(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'bytes' },\n\t\tresponse as Bytes,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\thydrated = false,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\thydrated,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\thydrated,\n\t\t);\n\t}\n\tconst res = format(\n\t\tblockSchema,\n\t\tresponse as unknown as Block,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n\n\tif (!isNullish(res)) {\n\t\tconst result = {\n\t\t\t...res,\n\t\t\ttransactions: res.transactions ?? [],\n\t\t};\n\t\treturn result;\n\t}\n\n\treturn res;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockUncleCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getUncle<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\tuncleIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\tblockSchema,\n\t\tresponse as unknown as Block,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionByHash(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, {\n\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\tfillInputAndData: true,\n\t\t  });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getPendingTransactions<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n\n\treturn response.map(transaction =>\n\t\tformatTransaction(\n\t\t\ttransaction as unknown as Transaction,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t{\n\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\tfillInputAndData: true,\n\t\t\t},\n\t\t),\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionFromBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\ttransactionIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t}\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat ?? web3Context.defaultReturnFormat, {\n\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\tfillInputAndData: true,\n\t\t  });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tlet response;\n\ttry {\n\t\tresponse = await ethRpcMethods.getTransactionReceipt(\n\t\t\tweb3Context.requestManager,\n\t\t\ttransactionHashFormatted,\n\t\t);\n\t} catch (error) {\n\t\t// geth indexing error, we poll until transactions stopped indexing\n\t\tif (\n\t\t\ttypeof error === 'object' &&\n\t\t\t!isNullish(error) &&\n\t\t\t'message' in error &&\n\t\t\t(error as { message: string }).message === 'transaction indexing is in progress'\n\t\t) {\n\t\t\tconsole.warn('Transaction indexing is in progress.');\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n\treturn isNullish(response)\n\t\t? response\n\t\t: format(\n\t\t\t\ttransactionReceiptSchema,\n\t\t\t\tresponse as unknown as TransactionReceipt,\n\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t  );\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getTransactionCount(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionObj:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\treturnFormat: ReturnFormat,\n\toptions: SendTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n\ttransactionMiddleware?: TransactionMiddleware,\n): Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>> {\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\n\t\t\t\t\tlet transaction = { ...transactionObj };\n\n\t\t\t\t\tif (!isNullish(transactionMiddleware)) {\n\t\t\t\t\t\ttransaction = await transactionMiddleware.processTransaction(transaction);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet transactionFormatted: FormatType<\n\t\t\t\t\t\t| Transaction\n\t\t\t\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithFromAndToLocalWalletIndex,\n\t\t\t\t\t\tReturnFormat\n\t\t\t\t\t> = formatTransaction(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\tfrom: getTransactionFromOrToAttr('from', web3Context, transaction),\n\t\t\t\t\t\t\tto: getTransactionFromOrToAttr('to', web3Context, transaction),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\t\t\t},\n\t\t\t\t\t) as FormatType<Transaction, ReturnFormat>;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttransactionFormatted = (await sendTxHelper.populateGasPrice({\n\t\t\t\t\t\t\ttransaction,\n\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t})) as FormatType<Transaction, ReturnFormat>;\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(transactionFormatted);\n\n\t\t\t\t\t\tlet wallet: Web3BaseWalletAccount | undefined;\n\n\t\t\t\t\t\tif (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n\t\t\t\t\t\t\twallet = web3Context.wallet.get(\n\t\t\t\t\t\t\t\t(transactionFormatted as Transaction).from as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHash: HexString = await sendTxHelper.signAndSend({\n\t\t\t\t\t\t\twallet,\n\t\t\t\t\t\t\ttx: transactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsendTxHelper.emitSent(transactionFormatted);\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsignedTransaction: Bytes,\n\treturnFormat: ReturnFormat,\n\toptions: SendSignedTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>> {\n\t// TODO - Promise returned in function argument where a void return was expected\n\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t\t// Formatting signedTransaction to be send to RPC endpoint\n\t\t\t\t\tconst signedTransactionFormattedHex = format(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransaction = TransactionFactory.fromSerializedData(\n\t\t\t\t\t\tbytesToUint8Array(hexToBytes(signedTransactionFormattedHex)),\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransactionWithFrom = {\n\t\t\t\t\t\t...unSerializedTransaction.toJSON(),\n\t\t\t\t\t\t// Some providers will default `from` to address(0) causing the error\n\t\t\t\t\t\t// reported from `eth_call` to not be the reason the user's tx failed\n\t\t\t\t\t\t// e.g. `eth_call` will return an Out of Gas error for a failed\n\t\t\t\t\t\t// smart contract execution contract, because the sender, address(0),\n\t\t\t\t\t\t// has no balance to pay for the gas of the transaction execution\n\t\t\t\t\t\tfrom: unSerializedTransaction.getSenderAddress().toString(),\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { v, r, s, ...txWithoutSigParams } = unSerializedTransactionWithFrom;\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttxWithoutSigParams as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHash = await trySendTransaction(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\tsignedTransactionFormattedHex,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSent(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function sign<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tmessage: Bytes,\n\taddressOrIndex: Address | number,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);\n\tif (web3Context.wallet?.get(addressOrIndex)) {\n\t\tconst wallet = web3Context.wallet.get(addressOrIndex) as Web3BaseWalletAccount;\n\t\tconst signed = wallet.sign(messageFormatted);\n\t\treturn format(SignatureObjectSchema, signed, returnFormat);\n\t}\n\n\tif (typeof addressOrIndex === 'number') {\n\t\tthrow new SignatureError(\n\t\t\tmessage,\n\t\t\t'RPC method \"eth_sign\" does not support index signatures',\n\t\t);\n\t}\n\n\tconst response = await ethRpcMethods.sign(\n\t\tweb3Context.requestManager,\n\t\taddressOrIndex,\n\t\tmessageFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTransaction(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t}),\n\t);\n\t// Some clients only return the encoded signed transaction (e.g. Ganache)\n\t// while clients such as Geth return the desired SignedTransactionInfoAPI object\n\treturn isString(response as HexStringBytes)\n\t\t? decodeSignedTransaction(response as HexStringBytes, returnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  })\n\t\t: {\n\t\t\t\traw: format(\n\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t(response as SignedTransactionInfoAPI).raw,\n\t\t\t\t\treturnFormat,\n\t\t\t\t),\n\t\t\t\ttx: formatTransaction((response as SignedTransactionInfoAPI).tx, returnFormat, {\n\t\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\t\tfillInputAndData: true,\n\t\t\t\t}),\n\t\t  };\n}\n\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function call<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.call(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t}),\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function estimateGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t});\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.estimateGas(\n\t\tweb3Context.requestManager,\n\t\ttransactionFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\tfilter: Filter,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(\n\t\t\tlogSchema,\n\t\t\tres as unknown as Log,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getChainId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getChainId(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\t// Response is number in hex formatted string\n\t\tresponse as unknown as number,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getProof<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: Bytes[],\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageKeysFormatted = storageKeys.map(storageKey =>\n\t\tformat({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT),\n\t);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.getProof(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageKeysFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\taccountSchema,\n\t\tresponse as unknown as AccountObject,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getFeeHistory<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblockCount: Numbers,\n\tnewestBlock: BlockNumberOrTag = web3Context.defaultBlock,\n\trewardPercentiles: Numbers[],\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);\n\n\tconst newestBlockFormatted = isBlockTag(newestBlock as string)\n\t\t? (newestBlock as BlockTag)\n\t\t: format({ format: 'uint' }, newestBlock as Numbers, ETH_DATA_FORMAT);\n\n\tconst rewardPercentilesFormatted = format(\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\trewardPercentiles,\n\t\tNUMBER_DATA_FORMAT,\n\t);\n\n\tconst response = await ethRpcMethods.getFeeHistory(\n\t\tweb3Context.requestManager,\n\t\tblockCountFormatted,\n\t\tnewestBlockFormatted,\n\t\trewardPercentilesFormatted,\n\t);\n\n\treturn format(\n\t\tfeeHistorySchema,\n\t\tresponse as unknown as FeeHistory,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function createAccessList<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionForAccessList,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = (await ethRpcMethods.createAccessList(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t}),\n\t\tblockNumberFormatted,\n\t)) as unknown as AccessListResult;\n\n\treturn format(\n\t\taccessListResultSchema,\n\t\tresponse,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTypedData<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy: boolean,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTypedData(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\ttypedData,\n\t\tuseLegacy,\n\t);\n\n\treturn format({ format: 'bytes' }, response, returnFormat ?? web3Context.defaultReturnFormat);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}