{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SendTxHelper = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst web3_types_1 = require(\"web3-types\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_rpc_methods_1 = require(\"web3-rpc-methods\");\n// eslint-disable-next-line import/no-cycle\nconst get_transaction_gas_pricing_js_1 = require(\"./get_transaction_gas_pricing.js\");\n// eslint-disable-next-line import/no-cycle\nconst try_send_transaction_js_1 = require(\"./try_send_transaction.js\");\n// eslint-disable-next-line import/no-cycle\nconst watch_transaction_for_confirmations_js_1 = require(\"./watch_transaction_for_confirmations.js\");\nconst constants_js_1 = require(\"../constants.js\");\n// eslint-disable-next-line import/no-cycle\nconst get_transaction_error_js_1 = require(\"./get_transaction_error.js\");\n// eslint-disable-next-line import/no-cycle\nconst get_revert_reason_js_1 = require(\"./get_revert_reason.js\");\nconst decoding_js_1 = require(\"./decoding.js\");\nclass SendTxHelper {\n  constructor({\n    options,\n    web3Context,\n    promiEvent,\n    returnFormat\n  }) {\n    this.options = {\n      checkRevertBeforeSending: true\n    };\n    this.options = options;\n    this.web3Context = web3Context;\n    this.promiEvent = promiEvent;\n    this.returnFormat = returnFormat;\n  }\n  getReceiptWithEvents(data) {\n    var _a, _b;\n    const result = Object.assign({}, data !== null && data !== void 0 ? data : {});\n    if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.contractAbi) && result.logs && result.logs.length > 0) {\n      result.events = {};\n      for (const log of result.logs) {\n        const event = (0, decoding_js_1.decodeEventABI)(constants_js_1.ALL_EVENTS_ABI, log, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi, this.returnFormat);\n        if (event.event) {\n          result.events[event.event] = event;\n        }\n      }\n    }\n    return result;\n  }\n  checkRevertBeforeSending(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.options.checkRevertBeforeSending !== false) {\n        let formatTx = tx;\n        if ((0, web3_validator_1.isNullish)(tx.data) && (0, web3_validator_1.isNullish)(tx.input) && (0, web3_validator_1.isNullish)(tx.gas)) {\n          // eth.call runs into error if data isnt filled and gas is not defined, its a simple transaction so we fill it with 21000\n          formatTx = Object.assign(Object.assign({}, tx), {\n            gas: 21000\n          });\n        }\n        const reason = yield (0, get_revert_reason_js_1.getRevertReason)(this.web3Context, formatTx, this.options.contractAbi);\n        if (reason !== undefined) {\n          throw yield (0, get_transaction_error_js_1.getTransactionError)(this.web3Context, tx, undefined, undefined, this.options.contractAbi, reason);\n        }\n      }\n    });\n  }\n  emitSending(tx) {\n    if (this.promiEvent.listenerCount('sending') > 0) {\n      this.promiEvent.emit('sending', tx);\n    }\n  }\n  populateGasPrice(_a) {\n    return __awaiter(this, arguments, void 0, function* ({\n      transactionFormatted,\n      transaction\n    }) {\n      var _b;\n      let result = transactionFormatted;\n      if (!this.web3Context.config.ignoreGasPricing && !((_b = this.options) === null || _b === void 0 ? void 0 : _b.ignoreGasPricing) && (0, web3_validator_1.isNullish)(transactionFormatted.gasPrice) && ((0, web3_validator_1.isNullish)(transaction.maxPriorityFeePerGas) || (0, web3_validator_1.isNullish)(transaction.maxFeePerGas))) {\n        result = Object.assign(Object.assign({}, transactionFormatted), yield (0, get_transaction_gas_pricing_js_1.getTransactionGasPricing)(transactionFormatted, this.web3Context, web3_types_1.ETH_DATA_FORMAT));\n      }\n      return result;\n    });\n  }\n  signAndSend(_a) {\n    return __awaiter(this, arguments, void 0, function* ({\n      wallet,\n      tx\n    }) {\n      if (wallet) {\n        const signedTransaction = yield wallet.signTransaction(tx);\n        return (0, try_send_transaction_js_1.trySendTransaction)(this.web3Context, () => __awaiter(this, void 0, void 0, function* () {\n          return web3_rpc_methods_1.ethRpcMethods.sendRawTransaction(this.web3Context.requestManager, signedTransaction.rawTransaction);\n        }), signedTransaction.transactionHash);\n      }\n      return (0, try_send_transaction_js_1.trySendTransaction)(this.web3Context, () => __awaiter(this, void 0, void 0, function* () {\n        return web3_rpc_methods_1.ethRpcMethods.sendTransaction(this.web3Context.requestManager, tx);\n      }));\n    });\n  }\n  emitSent(tx) {\n    if (this.promiEvent.listenerCount('sent') > 0) {\n      this.promiEvent.emit('sent', tx);\n    }\n  }\n  emitTransactionHash(hash) {\n    if (this.promiEvent.listenerCount('transactionHash') > 0) {\n      this.promiEvent.emit('transactionHash', hash);\n    }\n  }\n  emitReceipt(receipt) {\n    if (this.promiEvent.listenerCount('receipt') > 0) {\n      this.promiEvent.emit('receipt',\n      // @ts-expect-error unknown type fix\n      receipt);\n    }\n  }\n  handleError(_a) {\n    return __awaiter(this, arguments, void 0, function* ({\n      error,\n      tx\n    }) {\n      var _b;\n      let _error = error;\n      if (_error instanceof web3_errors_1.ContractExecutionError && this.web3Context.handleRevert) {\n        _error = yield (0, get_transaction_error_js_1.getTransactionError)(this.web3Context, tx, undefined, undefined, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi);\n      }\n      if ((_error instanceof web3_errors_1.InvalidResponseError || _error instanceof web3_errors_1.ContractExecutionError || _error instanceof web3_errors_1.TransactionRevertWithCustomError || _error instanceof web3_errors_1.TransactionRevertedWithoutReasonError || _error instanceof web3_errors_1.TransactionRevertInstructionError || _error instanceof web3_errors_1.TransactionPollingTimeoutError) && this.promiEvent.listenerCount('error') > 0) {\n        this.promiEvent.emit('error', _error);\n      }\n      return _error;\n    });\n  }\n  emitConfirmation({\n    receipt,\n    transactionHash,\n    customTransactionReceiptSchema\n  }) {\n    if (this.promiEvent.listenerCount('confirmation') > 0) {\n      (0, watch_transaction_for_confirmations_js_1.watchTransactionForConfirmations)(this.web3Context, this.promiEvent, receipt, transactionHash, this.returnFormat, customTransactionReceiptSchema);\n    }\n  }\n  handleResolve(_a) {\n    return __awaiter(this, arguments, void 0, function* ({\n      receipt,\n      tx\n    }) {\n      var _b, _c, _d;\n      if ((_b = this.options) === null || _b === void 0 ? void 0 : _b.transactionResolver) {\n        return (_c = this.options) === null || _c === void 0 ? void 0 : _c.transactionResolver(receipt);\n      }\n      if (receipt.status === BigInt(0)) {\n        const error = yield (0, get_transaction_error_js_1.getTransactionError)(this.web3Context, tx,\n        // @ts-expect-error unknown type fix\n        receipt, undefined, (_d = this.options) === null || _d === void 0 ? void 0 : _d.contractAbi);\n        if (this.promiEvent.listenerCount('error') > 0) {\n          this.promiEvent.emit('error', error);\n        }\n        throw error;\n      } else {\n        return receipt;\n      }\n    });\n  }\n}\nexports.SendTxHelper = SendTxHelper;","map":{"version":3,"names":["web3_types_1","require","web3_validator_1","web3_errors_1","web3_rpc_methods_1","get_transaction_gas_pricing_js_1","try_send_transaction_js_1","watch_transaction_for_confirmations_js_1","constants_js_1","get_transaction_error_js_1","get_revert_reason_js_1","decoding_js_1","SendTxHelper","constructor","options","web3Context","promiEvent","returnFormat","checkRevertBeforeSending","getReceiptWithEvents","data","result","Object","assign","_a","contractAbi","logs","length","events","log","event","decodeEventABI","ALL_EVENTS_ABI","_b","tx","formatTx","isNullish","input","gas","reason","getRevertReason","undefined","getTransactionError","emitSending","listenerCount","emit","populateGasPrice","transactionFormatted","transaction","config","ignoreGasPricing","gasPrice","maxPriorityFeePerGas","maxFeePerGas","getTransactionGasPricing","ETH_DATA_FORMAT","signAndSend","wallet","signedTransaction","signTransaction","trySendTransaction","__awaiter","ethRpcMethods","sendRawTransaction","requestManager","rawTransaction","transactionHash","sendTransaction","emitSent","emitTransactionHash","hash","emitReceipt","receipt","handleError","error","_error","ContractExecutionError","handleRevert","InvalidResponseError","TransactionRevertWithCustomError","TransactionRevertedWithoutReasonError","TransactionRevertInstructionError","TransactionPollingTimeoutError","emitConfirmation","customTransactionReceiptSchema","watchTransactionForConfirmations","handleResolve","transactionResolver","_c","status","BigInt","_d","exports"],"sources":["/home/nathan/node_modules/web3-eth/src/utils/send_tx_helper.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tEthExecutionAPI,\n\tTransactionWithSenderAPI,\n\tWeb3BaseWalletAccount,\n\tHexString,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tLogsInput,\n\tTransactionHash,\n\tContractAbiWithSignature,\n} from 'web3-types';\nimport { Web3Context, Web3EventEmitter, Web3PromiEvent } from 'web3-core';\nimport { isNullish, JsonSchema } from 'web3-validator';\nimport {\n\tContractExecutionError,\n\tInvalidResponseError,\n\tTransactionPollingTimeoutError,\n\tTransactionRevertedWithoutReasonError,\n\tTransactionRevertInstructionError,\n\tTransactionRevertWithCustomError,\n} from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport {\n\tInternalTransaction,\n\tSendSignedTransactionEvents,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { watchTransactionForConfirmations } from './watch_transaction_for_confirmations.js';\nimport { ALL_EVENTS_ABI } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionError } from './get_transaction_error.js';\n// eslint-disable-next-line import/no-cycle\nimport { getRevertReason } from './get_revert_reason.js';\nimport { decodeEventABI } from './decoding.js';\n\nexport class SendTxHelper<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n\tTxType =\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n> {\n\tprivate readonly web3Context: Web3Context<EthExecutionAPI>;\n\tprivate readonly promiEvent: Web3PromiEvent<\n\t\tResolveType,\n\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>\n\t>;\n\tprivate readonly options: SendTransactionOptions<ResolveType> = {\n\t\tcheckRevertBeforeSending: true,\n\t};\n\tprivate readonly returnFormat: ReturnFormat;\n\tpublic constructor({\n\t\toptions,\n\t\tweb3Context,\n\t\tpromiEvent,\n\t\treturnFormat,\n\t}: {\n\t\tweb3Context: Web3Context<EthExecutionAPI>;\n\t\toptions: SendTransactionOptions<ResolveType>;\n\t\tpromiEvent: Web3PromiEvent<\n\t\t\tResolveType,\n\t\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>\n\t\t>;\n\t\treturnFormat: ReturnFormat;\n\t}) {\n\t\tthis.options = options;\n\t\tthis.web3Context = web3Context;\n\t\tthis.promiEvent = promiEvent;\n\t\tthis.returnFormat = returnFormat;\n\t}\n\n\tpublic getReceiptWithEvents(data: TransactionReceipt): ResolveType {\n\t\tconst result = { ...(data ?? {}) };\n\t\tif (this.options?.contractAbi && result.logs && result.logs.length > 0) {\n\t\t\tresult.events = {};\n\t\t\tfor (const log of result.logs) {\n\t\t\t\tconst event = decodeEventABI(\n\t\t\t\t\tALL_EVENTS_ABI,\n\t\t\t\t\tlog as LogsInput,\n\t\t\t\t\tthis.options?.contractAbi as ContractAbiWithSignature,\n\t\t\t\t\tthis.returnFormat,\n\t\t\t\t);\n\t\t\t\tif (event.event) {\n\t\t\t\t\tresult.events[event.event] = event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result as unknown as ResolveType;\n\t}\n\n\tpublic async checkRevertBeforeSending(tx: TransactionCall) {\n\t\tif (this.options.checkRevertBeforeSending !== false) {\n\t\t\tlet formatTx = tx;\n\t\t\tif (isNullish(tx.data) && isNullish(tx.input) && isNullish(tx.gas)) {\n\t\t\t\t// eth.call runs into error if data isnt filled and gas is not defined, its a simple transaction so we fill it with 21000\n\t\t\t\tformatTx = {\n\t\t\t\t\t...tx,\n\t\t\t\t\tgas: 21000,\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst reason = await getRevertReason(\n\t\t\t\tthis.web3Context,\n\t\t\t\tformatTx,\n\t\t\t\tthis.options.contractAbi,\n\t\t\t);\n\t\t\tif (reason !== undefined) {\n\t\t\t\tthrow await getTransactionError<ReturnFormat>(\n\t\t\t\t\tthis.web3Context,\n\t\t\t\t\ttx,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tthis.options.contractAbi,\n\t\t\t\t\treason,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic emitSending(tx: TxType | HexString) {\n\t\tif (this.promiEvent.listenerCount('sending') > 0) {\n\t\t\tthis.promiEvent.emit(\n\t\t\t\t'sending',\n\t\t\t\ttx as\n\t\t\t\t\t| SendSignedTransactionEvents<ReturnFormat>['sending']\n\t\t\t\t\t| SendTransactionEvents<ReturnFormat>['sending'],\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async populateGasPrice({\n\t\ttransactionFormatted,\n\t\ttransaction,\n\t}: {\n\t\ttransactionFormatted: TxType;\n\t\ttransaction: TxType;\n\t}): Promise<TxType> {\n\t\tlet result = transactionFormatted;\n\t\tif (\n\t\t\t!this.web3Context.config.ignoreGasPricing &&\n\t\t\t!this.options?.ignoreGasPricing &&\n\t\t\tisNullish((transactionFormatted as Transaction).gasPrice) &&\n\t\t\t(isNullish((transaction as Transaction).maxPriorityFeePerGas) ||\n\t\t\t\tisNullish((transaction as Transaction).maxFeePerGas))\n\t\t) {\n\t\t\tresult = {\n\t\t\t\t...transactionFormatted,\n\t\t\t\t// @TODO gasPrice, maxPriorityFeePerGas, maxFeePerGas\n\t\t\t\t// should not be included if undefined, but currently are\n\t\t\t\t...(await getTransactionGasPricing(\n\t\t\t\t\ttransactionFormatted as InternalTransaction,\n\t\t\t\t\tthis.web3Context,\n\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t)),\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic async signAndSend({\n\t\twallet,\n\t\ttx,\n\t}: {\n\t\twallet: Web3BaseWalletAccount | undefined;\n\t\ttx: TxType;\n\t}) {\n\t\tif (wallet) {\n\t\t\tconst signedTransaction = await wallet.signTransaction(tx as Transaction);\n\n\t\t\treturn trySendTransaction(\n\t\t\t\tthis.web3Context,\n\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\tthis.web3Context.requestManager,\n\t\t\t\t\t\tsignedTransaction.rawTransaction,\n\t\t\t\t\t),\n\t\t\t\tsignedTransaction.transactionHash,\n\t\t\t);\n\t\t}\n\t\treturn trySendTransaction(\n\t\t\tthis.web3Context,\n\t\t\tasync (): Promise<string> =>\n\t\t\t\tethRpcMethods.sendTransaction(\n\t\t\t\t\tthis.web3Context.requestManager,\n\t\t\t\t\ttx as Partial<TransactionWithSenderAPI>,\n\t\t\t\t),\n\t\t);\n\t}\n\n\tpublic emitSent(tx: TxType | HexString) {\n\t\tif (this.promiEvent.listenerCount('sent') > 0) {\n\t\t\tthis.promiEvent.emit(\n\t\t\t\t'sent',\n\t\t\t\ttx as\n\t\t\t\t\t| SendSignedTransactionEvents<ReturnFormat>['sent']\n\t\t\t\t\t| SendTransactionEvents<ReturnFormat>['sent'],\n\t\t\t);\n\t\t}\n\t}\n\tpublic emitTransactionHash(hash: string & Uint8Array) {\n\t\tif (this.promiEvent.listenerCount('transactionHash') > 0) {\n\t\t\tthis.promiEvent.emit('transactionHash', hash);\n\t\t}\n\t}\n\n\tpublic emitReceipt(receipt: ResolveType) {\n\t\tif (this.promiEvent.listenerCount('receipt') > 0) {\n\t\t\t(\n\t\t\t\tthis.promiEvent as Web3EventEmitter<\n\t\t\t\t\tSendTransactionEvents<ReturnFormat> | SendSignedTransactionEvents<ReturnFormat>\n\t\t\t\t>\n\t\t\t).emit(\n\t\t\t\t'receipt',\n\t\t\t\t// @ts-expect-error unknown type fix\n\t\t\t\treceipt,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async handleError({ error, tx }: { error: unknown; tx: TransactionCall }) {\n\t\tlet _error = error;\n\n\t\tif (_error instanceof ContractExecutionError && this.web3Context.handleRevert) {\n\t\t\t_error = await getTransactionError(\n\t\t\t\tthis.web3Context,\n\t\t\t\ttx,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\tthis.options?.contractAbi,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\t(_error instanceof InvalidResponseError ||\n\t\t\t\t_error instanceof ContractExecutionError ||\n\t\t\t\t_error instanceof TransactionRevertWithCustomError ||\n\t\t\t\t_error instanceof TransactionRevertedWithoutReasonError ||\n\t\t\t\t_error instanceof TransactionRevertInstructionError ||\n\t\t\t\t_error instanceof TransactionPollingTimeoutError) &&\n\t\t\tthis.promiEvent.listenerCount('error') > 0\n\t\t) {\n\t\t\tthis.promiEvent.emit('error', _error);\n\t\t}\n\n\t\treturn _error;\n\t}\n\n\tpublic emitConfirmation({\n\t\treceipt,\n\t\ttransactionHash,\n\t\tcustomTransactionReceiptSchema,\n\t}: {\n\t\treceipt: ResolveType;\n\t\ttransactionHash: TransactionHash;\n\t\tcustomTransactionReceiptSchema?: JsonSchema;\n\t}) {\n\t\tif (this.promiEvent.listenerCount('confirmation') > 0) {\n\t\t\twatchTransactionForConfirmations<\n\t\t\t\tReturnFormat,\n\t\t\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>,\n\t\t\t\tResolveType\n\t\t\t>(\n\t\t\t\tthis.web3Context,\n\t\t\t\tthis.promiEvent,\n\t\t\t\treceipt as unknown as TransactionReceipt,\n\t\t\t\ttransactionHash,\n\t\t\t\tthis.returnFormat,\n\t\t\t\tcustomTransactionReceiptSchema,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async handleResolve({ receipt, tx }: { receipt: ResolveType; tx: TransactionCall }) {\n\t\tif (this.options?.transactionResolver) {\n\t\t\treturn this.options?.transactionResolver(receipt as unknown as TransactionReceipt);\n\t\t}\n\t\tif ((receipt as unknown as TransactionReceipt).status === BigInt(0)) {\n\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\tthis.web3Context,\n\t\t\t\ttx,\n\t\t\t\t// @ts-expect-error unknown type fix\n\t\t\t\treceipt,\n\t\t\t\tundefined,\n\t\t\t\tthis.options?.contractAbi,\n\t\t\t);\n\t\t\tif (this.promiEvent.listenerCount('error') > 0) {\n\t\t\t\tthis.promiEvent.emit('error', error);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t} else {\n\t\t\treturn receipt;\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}