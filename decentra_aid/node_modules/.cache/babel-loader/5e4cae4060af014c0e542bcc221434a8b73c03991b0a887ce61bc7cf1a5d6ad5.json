{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ecrecover = exports.bigIntToHex = exports.unpadUint8Array = exports.setLengthLeft = exports.zeros = exports.toUint8Array = exports.intToUint8Array = exports.stripHexPrefix = void 0;\nexports.parseGethGenesis = parseGethGenesis;\nexports.padToEven = padToEven;\nexports.uint8ArrayToBigInt = uint8ArrayToBigInt;\nexports.bigIntToUint8Array = bigIntToUint8Array;\nexports.assertIsUint8Array = assertIsUint8Array;\nexports.stripZeros = stripZeros;\nexports.bigIntToUnpaddedUint8Array = bigIntToUnpaddedUint8Array;\nexports.toType = toType;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst constants_js_1 = require(\"../tx/constants.js\");\nconst enums_js_1 = require(\"./enums.js\");\nconst types_js_1 = require(\"./types.js\");\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nconst stripHexPrefix = str => {\n  if (typeof str !== 'string') throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n  return (0, web3_validator_1.isHexPrefixed)(str) ? str.slice(2) : str;\n};\nexports.stripHexPrefix = stripHexPrefix;\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce) {\n  if (!nonce || nonce === '0x0') {\n    return '0x0000000000000000';\n  }\n  if ((0, web3_validator_1.isHexPrefixed)(nonce)) {\n    return `0x${(0, exports.stripHexPrefix)(nonce).padStart(16, '0')}`;\n  }\n  return `0x${nonce.padStart(16, '0')}`;\n}\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`);\n  }\n  return `0x${i.toString(16)}`;\n};\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction parseGethParams(json, mergeForkIdPostMerge = true) {\n  var _a, _b;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const {\n    name,\n    config,\n    difficulty,\n    mixHash,\n    gasLimit,\n    coinbase,\n    baseFeePerGas\n  } = json;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  let {\n    extraData,\n    timestamp,\n    nonce\n  } = json;\n  const genesisTimestamp = Number(timestamp);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const {\n    chainId\n  } = config;\n  // geth is not strictly putting empty fields with a 0x prefix\n  if (extraData === '') {\n    extraData = '0x';\n  }\n  // geth may use number for timestamp\n  if (!(0, web3_validator_1.isHexPrefixed)(timestamp)) {\n    // eslint-disable-next-line radix\n    timestamp = intToHex(parseInt(timestamp));\n  }\n  // geth may not give us a nonce strictly formatted to an 8 byte hex string\n  if (nonce.length !== 18) {\n    nonce = formatNonce(nonce);\n  }\n  // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n  // but have different configuration parameters in geth genesis parameters\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (config.eip155Block !== config.eip158Block) {\n    throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');\n  }\n  const params = {\n    name,\n    chainId,\n    networkId: chainId,\n    genesis: {\n      timestamp,\n      // eslint-disable-next-line radix\n      gasLimit: parseInt(gasLimit),\n      // geth gasLimit and difficulty are hex strings while ours are `number`s\n      // eslint-disable-next-line radix\n      difficulty: parseInt(difficulty),\n      nonce,\n      extraData,\n      mixHash,\n      coinbase,\n      baseFeePerGas\n    },\n    hardfork: undefined,\n    hardforks: [],\n    bootstrapNodes: [],\n    consensus:\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config.clique !== undefined ? {\n      type: 'poa',\n      algorithm: 'clique',\n      clique: {\n        // The recent geth genesis seems to be using blockperiodseconds\n        // and epochlength for clique specification\n        // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        period: (_a = config.clique.period) !== null && _a !== void 0 ? _a : config.clique.blockperiodseconds,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment\n        epoch: (_b = config.clique.epoch) !== null && _b !== void 0 ? _b : config.clique.epochlength\n      }\n    } : {\n      type: 'pow',\n      algorithm: 'ethash',\n      ethash: {}\n    }\n  };\n  const forkMap = {\n    [enums_js_1.Hardfork.Homestead]: {\n      name: 'homesteadBlock'\n    },\n    [enums_js_1.Hardfork.Dao]: {\n      name: 'daoForkBlock'\n    },\n    [enums_js_1.Hardfork.TangerineWhistle]: {\n      name: 'eip150Block'\n    },\n    [enums_js_1.Hardfork.SpuriousDragon]: {\n      name: 'eip155Block'\n    },\n    [enums_js_1.Hardfork.Byzantium]: {\n      name: 'byzantiumBlock'\n    },\n    [enums_js_1.Hardfork.Constantinople]: {\n      name: 'constantinopleBlock'\n    },\n    [enums_js_1.Hardfork.Petersburg]: {\n      name: 'petersburgBlock'\n    },\n    [enums_js_1.Hardfork.Istanbul]: {\n      name: 'istanbulBlock'\n    },\n    [enums_js_1.Hardfork.MuirGlacier]: {\n      name: 'muirGlacierBlock'\n    },\n    [enums_js_1.Hardfork.Berlin]: {\n      name: 'berlinBlock'\n    },\n    [enums_js_1.Hardfork.London]: {\n      name: 'londonBlock'\n    },\n    [enums_js_1.Hardfork.MergeForkIdTransition]: {\n      name: 'mergeForkBlock',\n      postMerge: mergeForkIdPostMerge\n    },\n    [enums_js_1.Hardfork.Shanghai]: {\n      name: 'shanghaiTime',\n      postMerge: true,\n      isTimestamp: true\n    },\n    [enums_js_1.Hardfork.ShardingForkDev]: {\n      name: 'shardingForkTime',\n      postMerge: true,\n      isTimestamp: true\n    }\n  };\n  // forkMapRev is the map from config field name to Hardfork\n  const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n    acc[forkMap[elem].name] = elem;\n    return acc;\n  }, {});\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const configHardforkNames = Object.keys(config).filter(\n  // eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/prefer-optional-chain\n  key => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n  params.hardforks = configHardforkNames.map(nameBlock => ({\n    name: forkMapRev[nameBlock],\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    block:\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    forkMap[forkMapRev[nameBlock]].isTimestamp === true ||\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    typeof config[nameBlock] !== 'number' ?\n    // eslint-disable-next-line no-null/no-null\n    null :\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config[nameBlock],\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    timestamp:\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    forkMap[forkMapRev[nameBlock]].isTimestamp === true &&\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    typeof config[nameBlock] === 'number' ?\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config[nameBlock] : undefined\n  }))\n  // eslint-disable-next-line no-null/no-null\n  .filter(fork => fork.block !== null || fork.timestamp !== undefined);\n  params.hardforks.sort((a, b) => {\n    var _a, _b;\n    return ((_a = a.block) !== null && _a !== void 0 ? _a : Infinity) - ((_b = b.block) !== null && _b !== void 0 ? _b : Infinity);\n  });\n  params.hardforks.sort((a, b) => {\n    var _a, _b;\n    return ((_a = a.timestamp) !== null && _a !== void 0 ? _a : genesisTimestamp) - ((_b = b.timestamp) !== null && _b !== void 0 ? _b : genesisTimestamp);\n  });\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (config.terminalTotalDifficulty !== undefined) {\n    // Following points need to be considered for placement of merge hf\n    // - Merge hardfork can't be placed at genesis\n    // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n    // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n    //   necessary for e.g. withdrawals\n    const mergeConfig = {\n      name: enums_js_1.Hardfork.Merge,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n      ttd: config.terminalTotalDifficulty,\n      // eslint-disable-next-line no-null/no-null\n      block: null\n    };\n    // Merge hardfork has to be placed before first hardfork that is dependent on merge\n    const postMergeIndex = params.hardforks.findIndex(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    hf => {\n      var _a;\n      return ((_a = forkMap[hf.name]) === null || _a === void 0 ? void 0 : _a.postMerge) === true;\n    });\n    if (postMergeIndex !== -1) {\n      params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n    } else {\n      params.hardforks.push(mergeConfig);\n    }\n  }\n  const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n  params.hardfork = latestHardfork === null || latestHardfork === void 0 ? void 0 : latestHardfork.name;\n  params.hardforks.unshift({\n    name: enums_js_1.Hardfork.Chainstart,\n    block: 0\n  });\n  return params;\n}\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction parseGethGenesis(json, name, mergeForkIdPostMerge) {\n  try {\n    if (['config', 'difficulty', 'gasLimit', 'alloc'].some(field => !(field in json))) {\n      throw new Error('Invalid format, expected geth genesis fields missing');\n    }\n    if (name !== undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign\n      json.name = name;\n    }\n    return parseGethParams(json, mergeForkIdPostMerge);\n  } catch (e) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\n    throw new Error(`Error parsing parameters file: ${e.message}`);\n  }\n}\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nfunction padToEven(value) {\n  let a = value;\n  if (typeof a !== 'string') {\n    throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n  }\n  if (a.length % 2) a = `0${a}`;\n  return a;\n}\n/**\n * Converts an `Number` to a `Uint8Array`\n * @param {Number} i\n * @return {Uint8Array}\n */\nconst intToUint8Array = function (i) {\n  const hex = intToHex(i);\n  return (0, web3_utils_1.hexToBytes)(`0x${padToEven(hex.slice(2))}`);\n};\nexports.intToUint8Array = intToUint8Array;\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toUint8Array()` method.\n * @param v the value\n */\nconst toUint8Array = function (v) {\n  var _a;\n  // eslint-disable-next-line no-null/no-null\n  if (v === null || v === undefined) {\n    return new Uint8Array();\n  }\n  if (v instanceof Uint8Array) {\n    return v;\n  }\n  if (((_a = v === null || v === void 0 ? void 0 : v.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Uint8Array') {\n    return Uint8Array.from(v);\n  }\n  if (Array.isArray(v)) {\n    return Uint8Array.from(v);\n  }\n  if (typeof v === 'string') {\n    if (!(0, web3_validator_1.isHexString)(v)) {\n      throw new Error(`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`);\n    }\n    return (0, web3_utils_1.hexToBytes)(padToEven((0, exports.stripHexPrefix)(v)));\n  }\n  if (typeof v === 'number') {\n    return (0, exports.toUint8Array)((0, web3_utils_1.numberToHex)(v));\n  }\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n    }\n    let n = v.toString(16);\n    if (n.length % 2) n = `0${n}`;\n    return (0, exports.toUint8Array)(`0x${n}`);\n  }\n  if (v.toArray) {\n    // converts a BN to a Uint8Array\n    return Uint8Array.from(v.toArray());\n  }\n  throw new Error('invalid type');\n};\nexports.toUint8Array = toUint8Array;\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n */\nfunction uint8ArrayToBigInt(buf) {\n  const hex = (0, web3_utils_1.bytesToHex)(buf);\n  if (hex === '0x') {\n    return BigInt(0);\n  }\n  return BigInt(hex);\n}\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n */\nfunction bigIntToUint8Array(num) {\n  return (0, exports.toUint8Array)(`0x${num.toString(16)}`);\n}\n/**\n * Returns a Uint8Array filled with 0s.\n * @param bytes the number of bytes the Uint8Array should be\n */\nconst zeros = function (bytes) {\n  return new Uint8Array(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Uint8Array)\n */\nconst setLength = function (msg, length, right) {\n  const buf = (0, exports.zeros)(length);\n  if (right) {\n    if (msg.length < length) {\n      buf.set(msg);\n      return buf;\n    }\n    return msg.subarray(0, length);\n  }\n  if (msg.length < length) {\n    buf.set(msg, length - msg.length);\n    return buf;\n  }\n  return msg.subarray(-length);\n};\n/**\n * Throws if input is not a Uint8Array\n * @param {Uint8Array} input value to check\n */\nfunction assertIsUint8Array(input) {\n  if (!(0, web3_utils_1.isUint8Array)(input)) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    const msg = `This method only supports Uint8Array but input was: ${input}`;\n    throw new Error(msg);\n  }\n}\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @return (Uint8Array)\n */\nconst setLengthLeft = function (msg, length) {\n  assertIsUint8Array(msg);\n  return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.\n * @param a (Uint8Array|Array|String)\n * @return (Uint8Array|Array|String)\n */\nfunction stripZeros(a) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n  let first = a[0];\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n  while (a.length > 0 && first.toString() === '0') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign\n    a = a.slice(1);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access\n    first = a[0];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return a;\n}\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param a (Uint8Array)\n * @return (Uint8Array)\n */\nconst unpadUint8Array = function (a) {\n  assertIsUint8Array(a);\n  return stripZeros(a);\n};\nexports.unpadUint8Array = unpadUint8Array;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nconst bigIntToHex = num => `0x${num.toString(16)}`;\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bigIntToUnpaddedUint8Array(value) {\n  return (0, exports.unpadUint8Array)(bigIntToUint8Array(value));\n}\nfunction calculateSigRecovery(v, chainId) {\n  if (v === BigInt(0) || v === BigInt(1)) return v;\n  if (chainId === undefined) {\n    return v - BigInt(27);\n  }\n  return v - (chainId * BigInt(2) + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n  return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const senderPubKey = new constants_js_1.secp256k1.Signature(uint8ArrayToBigInt(r), uint8ArrayToBigInt(s)).addRecoveryBit(Number(recovery)).recoverPublicKey(msgHash).toRawBytes(false);\n  return senderPubKey.slice(1);\n};\nexports.ecrecover = ecrecover;\nfunction toType(input, outputType) {\n  // eslint-disable-next-line no-null/no-null\n  if (input === null) {\n    // eslint-disable-next-line no-null/no-null\n    return null;\n  }\n  if (input === undefined) {\n    return undefined;\n  }\n  if (typeof input === 'string' && !(0, web3_validator_1.isHexString)(input)) {\n    throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n  const output = (0, exports.toUint8Array)(input);\n  switch (outputType) {\n    case types_js_1.TypeOutput.Uint8Array:\n      return output;\n    case types_js_1.TypeOutput.BigInt:\n      return uint8ArrayToBigInt(output);\n    case types_js_1.TypeOutput.Number:\n      {\n        const bigInt = uint8ArrayToBigInt(output);\n        if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n          throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n        }\n        return Number(bigInt);\n      }\n    case types_js_1.TypeOutput.PrefixedHexString:\n      return (0, web3_utils_1.bytesToHex)(output);\n    default:\n      throw new Error('unknown outputType');\n  }\n}","map":{"version":3,"names":["exports","parseGethGenesis","padToEven","uint8ArrayToBigInt","bigIntToUint8Array","assertIsUint8Array","stripZeros","bigIntToUnpaddedUint8Array","toType","web3_validator_1","require","web3_utils_1","constants_js_1","enums_js_1","types_js_1","stripHexPrefix","str","Error","isHexPrefixed","slice","formatNonce","nonce","padStart","intToHex","i","Number","isSafeInteger","toString","parseGethParams","json","mergeForkIdPostMerge","name","config","difficulty","mixHash","gasLimit","coinbase","baseFeePerGas","extraData","timestamp","genesisTimestamp","chainId","parseInt","length","eip155Block","eip158Block","params","networkId","genesis","hardfork","undefined","hardforks","bootstrapNodes","consensus","clique","type","algorithm","period","_a","blockperiodseconds","epoch","_b","epochlength","ethash","forkMap","Hardfork","Homestead","Dao","TangerineWhistle","SpuriousDragon","Byzantium","Constantinople","Petersburg","Istanbul","MuirGlacier","Berlin","London","MergeForkIdTransition","postMerge","Shanghai","isTimestamp","ShardingForkDev","forkMapRev","Object","keys","reduce","acc","elem","configHardforkNames","filter","key","map","nameBlock","block","fork","sort","a","b","Infinity","terminalTotalDifficulty","mergeConfig","Merge","ttd","postMergeIndex","findIndex","hf","splice","push","latestHardfork","unshift","Chainstart","some","field","e","message","value","intToUint8Array","hex","hexToBytes","toUint8Array","v","Uint8Array","constructor","from","Array","isArray","isHexString","numberToHex","BigInt","n","toArray","buf","bytesToHex","num","zeros","bytes","fill","setLength","msg","right","set","subarray","input","isUint8Array","setLengthLeft","first","unpadUint8Array","bigIntToHex","calculateSigRecovery","isValidSigRecovery","recovery","ecrecover","msgHash","r","s","senderPubKey","secp256k1","Signature","addRecoveryBit","recoverPublicKey","toRawBytes","outputType","output","TypeOutput","bigInt","MAX_SAFE_INTEGER","PrefixedHexString"],"sources":["/home/ubuntu/node_modules/web3-eth-accounts/src/common/utils.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { isHexPrefixed, isHexString } from 'web3-validator';\nimport { bytesToHex, hexToBytes, isUint8Array, numberToHex } from 'web3-utils';\nimport { secp256k1 } from '../tx/constants.js';\nimport { Hardfork } from './enums.js';\nimport { ToBytesInputTypes, TypeOutput, TypeOutputReturnType } from './types.js';\n\ntype ConfigHardfork =\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t| { name: string; block: null; timestamp: number }\n\t| { name: string; block: number; timestamp?: number };\n\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nexport const stripHexPrefix = (str: string): string => {\n\tif (typeof str !== 'string')\n\t\tthrow new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n\n\treturn isHexPrefixed(str) ? str.slice(2) : str;\n};\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce: string): string {\n\tif (!nonce || nonce === '0x0') {\n\t\treturn '0x0000000000000000';\n\t}\n\tif (isHexPrefixed(nonce)) {\n\t\treturn `0x${stripHexPrefix(nonce).padStart(16, '0')}`;\n\t}\n\treturn `0x${nonce.padStart(16, '0')}`;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i: number) {\n\tif (!Number.isSafeInteger(i) || i < 0) {\n\t\tthrow new Error(`Received an invalid integer type: ${i}`);\n\t}\n\treturn `0x${i.toString(16)}`;\n};\n\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction parseGethParams(json: any, mergeForkIdPostMerge = true) {\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst {\n\t\tname,\n\t\tconfig,\n\t\tdifficulty,\n\t\tmixHash,\n\t\tgasLimit,\n\t\tcoinbase,\n\t\tbaseFeePerGas,\n\t}: {\n\t\tname: string;\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tconfig: any;\n\t\tdifficulty: string;\n\t\tmixHash: string;\n\t\tgasLimit: string;\n\t\tcoinbase: string;\n\t\tbaseFeePerGas: string;\n\t} = json;\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tlet { extraData, timestamp, nonce }: { extraData: string; timestamp: string; nonce: string } =\n\t\tjson;\n\tconst genesisTimestamp = Number(timestamp);\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst { chainId }: { chainId: number } = config;\n\n\t// geth is not strictly putting empty fields with a 0x prefix\n\tif (extraData === '') {\n\t\textraData = '0x';\n\t}\n\t// geth may use number for timestamp\n\tif (!isHexPrefixed(timestamp)) {\n\t\t// eslint-disable-next-line radix\n\t\ttimestamp = intToHex(parseInt(timestamp));\n\t}\n\t// geth may not give us a nonce strictly formatted to an 8 byte hex string\n\tif (nonce.length !== 18) {\n\t\tnonce = formatNonce(nonce);\n\t}\n\n\t// EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n\t// but have different configuration parameters in geth genesis parameters\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\tif (config.eip155Block !== config.eip158Block) {\n\t\tthrow new Error(\n\t\t\t'EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork',\n\t\t);\n\t}\n\n\tconst params = {\n\t\tname,\n\t\tchainId,\n\t\tnetworkId: chainId,\n\t\tgenesis: {\n\t\t\ttimestamp,\n\t\t\t// eslint-disable-next-line radix\n\t\t\tgasLimit: parseInt(gasLimit), // geth gasLimit and difficulty are hex strings while ours are `number`s\n\t\t\t// eslint-disable-next-line radix\n\t\t\tdifficulty: parseInt(difficulty),\n\t\t\tnonce,\n\t\t\textraData,\n\t\t\tmixHash,\n\t\t\tcoinbase,\n\t\t\tbaseFeePerGas,\n\t\t},\n\t\thardfork: undefined as string | undefined,\n\t\thardforks: [] as ConfigHardfork[],\n\t\tbootstrapNodes: [],\n\t\tconsensus:\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\tconfig.clique !== undefined\n\t\t\t\t? {\n\t\t\t\t\t\ttype: 'poa',\n\t\t\t\t\t\talgorithm: 'clique',\n\t\t\t\t\t\tclique: {\n\t\t\t\t\t\t\t// The recent geth genesis seems to be using blockperiodseconds\n\t\t\t\t\t\t\t// and epochlength for clique specification\n\t\t\t\t\t\t\t// see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\t\t\tperiod: config.clique.period ?? config.clique.blockperiodseconds,\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\t\t\tepoch: config.clique.epoch ?? config.clique.epochlength,\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\ttype: 'pow',\n\t\t\t\t\t\talgorithm: 'ethash',\n\t\t\t\t\t\tethash: {},\n\t\t\t\t  },\n\t};\n\n\tconst forkMap: { [key: string]: { name: string; postMerge?: boolean; isTimestamp?: boolean } } =\n\t\t{\n\t\t\t[Hardfork.Homestead]: { name: 'homesteadBlock' },\n\t\t\t[Hardfork.Dao]: { name: 'daoForkBlock' },\n\t\t\t[Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n\t\t\t[Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n\t\t\t[Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n\t\t\t[Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n\t\t\t[Hardfork.Petersburg]: { name: 'petersburgBlock' },\n\t\t\t[Hardfork.Istanbul]: { name: 'istanbulBlock' },\n\t\t\t[Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n\t\t\t[Hardfork.Berlin]: { name: 'berlinBlock' },\n\t\t\t[Hardfork.London]: { name: 'londonBlock' },\n\t\t\t[Hardfork.MergeForkIdTransition]: {\n\t\t\t\tname: 'mergeForkBlock',\n\t\t\t\tpostMerge: mergeForkIdPostMerge,\n\t\t\t},\n\t\t\t[Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n\t\t\t[Hardfork.ShardingForkDev]: {\n\t\t\t\tname: 'shardingForkTime',\n\t\t\t\tpostMerge: true,\n\t\t\t\tisTimestamp: true,\n\t\t\t},\n\t\t};\n\n\t// forkMapRev is the map from config field name to Hardfork\n\tconst forkMapRev = Object.keys(forkMap).reduce<{ [key: string]: string }>((acc, elem) => {\n\t\tacc[forkMap[elem].name] = elem;\n\t\treturn acc;\n\t}, {});\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\tconst configHardforkNames = Object.keys(config).filter(\n\t\t// eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/prefer-optional-chain\n\t\tkey => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null,\n\t);\n\n\tparams.hardforks = configHardforkNames\n\t\t.map(nameBlock => ({\n\t\t\tname: forkMapRev[nameBlock],\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tblock:\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tforkMap[forkMapRev[nameBlock]].isTimestamp === true ||\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\ttypeof config[nameBlock] !== 'number'\n\t\t\t\t\t? // eslint-disable-next-line no-null/no-null\n\t\t\t\t\t  null\n\t\t\t\t\t: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\t\t  config[nameBlock],\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\ttimestamp:\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tforkMap[forkMapRev[nameBlock]].isTimestamp === true &&\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\ttypeof config[nameBlock] === 'number'\n\t\t\t\t\t? // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\t\t  config[nameBlock]\n\t\t\t\t\t: undefined,\n\t\t}))\n\t\t// eslint-disable-next-line no-null/no-null\n\t\t.filter(fork => fork.block !== null || fork.timestamp !== undefined) as ConfigHardfork[];\n\n\tparams.hardforks.sort(\n\t\t(a: ConfigHardfork, b: ConfigHardfork) => (a.block ?? Infinity) - (b.block ?? Infinity),\n\t);\n\n\tparams.hardforks.sort(\n\t\t(a: ConfigHardfork, b: ConfigHardfork) =>\n\t\t\t(a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp),\n\t);\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\tif (config.terminalTotalDifficulty !== undefined) {\n\t\t// Following points need to be considered for placement of merge hf\n\t\t// - Merge hardfork can't be placed at genesis\n\t\t// - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n\t\t// - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n\t\t//   necessary for e.g. withdrawals\n\t\tconst mergeConfig = {\n\t\t\tname: Hardfork.Merge,\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\tttd: config.terminalTotalDifficulty,\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tblock: null,\n\t\t};\n\n\t\t// Merge hardfork has to be placed before first hardfork that is dependent on merge\n\t\tconst postMergeIndex = params.hardforks.findIndex(\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\thf => forkMap[hf.name]?.postMerge === true,\n\t\t);\n\t\tif (postMergeIndex !== -1) {\n\t\t\tparams.hardforks.splice(postMergeIndex, 0, mergeConfig as unknown as ConfigHardfork);\n\t\t} else {\n\t\t\tparams.hardforks.push(mergeConfig as unknown as ConfigHardfork);\n\t\t}\n\t}\n\n\tconst latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n\tparams.hardfork = latestHardfork?.name;\n\tparams.hardforks.unshift({ name: Hardfork.Chainstart, block: 0 });\n\n\treturn params;\n}\n\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function parseGethGenesis(json: any, name?: string, mergeForkIdPostMerge?: boolean) {\n\ttry {\n\t\tif (['config', 'difficulty', 'gasLimit', 'alloc'].some(field => !(field in json))) {\n\t\t\tthrow new Error('Invalid format, expected geth genesis fields missing');\n\t\t}\n\t\tif (name !== undefined) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign\n\t\t\tjson.name = name;\n\t\t}\n\t\treturn parseGethParams(json, mergeForkIdPostMerge);\n\t} catch (e) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\n\t\tthrow new Error(`Error parsing parameters file: ${(e as { message: string }).message}`);\n\t}\n}\n\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nexport function padToEven(value: string): string {\n\tlet a = value;\n\n\tif (typeof a !== 'string') {\n\t\tthrow new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n\t}\n\n\tif (a.length % 2) a = `0${a}`;\n\n\treturn a;\n}\n\n/**\n * Converts an `Number` to a `Uint8Array`\n * @param {Number} i\n * @return {Uint8Array}\n */\nexport const intToUint8Array = function (i: number) {\n\tconst hex = intToHex(i);\n\treturn hexToBytes(`0x${padToEven(hex.slice(2))}`);\n};\n\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toUint8Array()` method.\n * @param v the value\n */\nexport const toUint8Array = function (v: ToBytesInputTypes): Uint8Array {\n\t// eslint-disable-next-line no-null/no-null\n\tif (v === null || v === undefined) {\n\t\treturn new Uint8Array();\n\t}\n\n\tif (v instanceof Uint8Array) {\n\t\treturn v;\n\t}\n\n\tif (v?.constructor?.name === 'Uint8Array') {\n\t\treturn Uint8Array.from(v as unknown as Uint8Array);\n\t}\n\n\tif (Array.isArray(v)) {\n\t\treturn Uint8Array.from(v);\n\t}\n\n\tif (typeof v === 'string') {\n\t\tif (!isHexString(v)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`,\n\t\t\t);\n\t\t}\n\t\treturn hexToBytes(padToEven(stripHexPrefix(v)));\n\t}\n\n\tif (typeof v === 'number') {\n\t\treturn toUint8Array(numberToHex(v));\n\t}\n\n\tif (typeof v === 'bigint') {\n\t\tif (v < BigInt(0)) {\n\t\t\tthrow new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n\t\t}\n\t\tlet n = v.toString(16);\n\t\tif (n.length % 2) n = `0${n}`;\n\t\treturn toUint8Array(`0x${n}`);\n\t}\n\n\tif (v.toArray) {\n\t\t// converts a BN to a Uint8Array\n\t\treturn Uint8Array.from(v.toArray());\n\t}\n\n\tthrow new Error('invalid type');\n};\n\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n */\nexport function uint8ArrayToBigInt(buf: Uint8Array) {\n\tconst hex = bytesToHex(buf);\n\tif (hex === '0x') {\n\t\treturn BigInt(0);\n\t}\n\treturn BigInt(hex);\n}\n\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n */\nexport function bigIntToUint8Array(num: bigint) {\n\treturn toUint8Array(`0x${num.toString(16)}`);\n}\n\n/**\n * Returns a Uint8Array filled with 0s.\n * @param bytes the number of bytes the Uint8Array should be\n */\nexport const zeros = function (bytes: number): Uint8Array {\n\treturn new Uint8Array(bytes).fill(0);\n};\n\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Uint8Array)\n */\nconst setLength = function (msg: Uint8Array, length: number, right: boolean) {\n\tconst buf = zeros(length);\n\tif (right) {\n\t\tif (msg.length < length) {\n\t\t\tbuf.set(msg);\n\t\t\treturn buf;\n\t\t}\n\t\treturn msg.subarray(0, length);\n\t}\n\tif (msg.length < length) {\n\t\tbuf.set(msg, length - msg.length);\n\t\treturn buf;\n\t}\n\treturn msg.subarray(-length);\n};\n\n/**\n * Throws if input is not a Uint8Array\n * @param {Uint8Array} input value to check\n */\nexport function assertIsUint8Array(input: unknown): asserts input is Uint8Array {\n\tif (!isUint8Array(input)) {\n\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\tconst msg = `This method only supports Uint8Array but input was: ${input}`;\n\t\tthrow new Error(msg);\n\t}\n}\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @return (Uint8Array)\n */\nexport const setLengthLeft = function (msg: Uint8Array, length: number) {\n\tassertIsUint8Array(msg);\n\treturn setLength(msg, length, false);\n};\n\n/**\n * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.\n * @param a (Uint8Array|Array|String)\n * @return (Uint8Array|Array|String)\n */\nexport function stripZeros<T extends Uint8Array | number[] | string>(a: T): T {\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\tlet first = a[0];\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\twhile (a.length > 0 && first.toString() === '0') {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign\n\t\ta = a.slice(1) as T;\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access\n\t\tfirst = a[0];\n\t}\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\treturn a;\n}\n\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param a (Uint8Array)\n * @return (Uint8Array)\n */\nexport const unpadUint8Array = function (a: Uint8Array): Uint8Array {\n\tassertIsUint8Array(a);\n\treturn stripZeros(a);\n};\n\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nexport const bigIntToHex = (num: bigint) => `0x${num.toString(16)}`;\n\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param value value to convert\n */\nexport function bigIntToUnpaddedUint8Array(value: bigint): Uint8Array {\n\treturn unpadUint8Array(bigIntToUint8Array(value));\n}\n\nfunction calculateSigRecovery(v: bigint, chainId?: bigint): bigint {\n\tif (v === BigInt(0) || v === BigInt(1)) return v;\n\n\tif (chainId === undefined) {\n\t\treturn v - BigInt(27);\n\t}\n\treturn v - (chainId * BigInt(2) + BigInt(35));\n}\n\nfunction isValidSigRecovery(recovery: bigint): boolean {\n\treturn recovery === BigInt(0) || recovery === BigInt(1);\n}\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n\tmsgHash: Uint8Array,\n\tv: bigint,\n\tr: Uint8Array,\n\ts: Uint8Array,\n\tchainId?: bigint,\n): Uint8Array {\n\tconst recovery = calculateSigRecovery(v, chainId);\n\tif (!isValidSigRecovery(recovery)) {\n\t\tthrow new Error('Invalid signature v value');\n\t}\n\n\tconst senderPubKey = new secp256k1.Signature(uint8ArrayToBigInt(r), uint8ArrayToBigInt(s))\n\t\t.addRecoveryBit(Number(recovery))\n\t\t.recoverPublicKey(msgHash)\n\t\t.toRawBytes(false);\n\treturn senderPubKey.slice(1);\n};\n\n/**\n * Convert an input to a specified type.\n * Input of null/undefined returns null/undefined regardless of the output type.\n * @param input value to convert\n * @param outputType type to output\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null;\nexport function toType<T extends TypeOutput>(input: undefined, outputType: T): undefined;\nexport function toType<T extends TypeOutput>(\n\tinput: ToBytesInputTypes,\n\toutputType: T,\n): TypeOutputReturnType[T];\nexport function toType<T extends TypeOutput>(\n\tinput: ToBytesInputTypes,\n\toutputType: T,\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n): TypeOutputReturnType[T] | undefined | null {\n\t// eslint-disable-next-line no-null/no-null\n\tif (input === null) {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\tif (input === undefined) {\n\t\treturn undefined;\n\t}\n\n\tif (typeof input === 'string' && !isHexString(input)) {\n\t\tthrow new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n\t} else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n\t\tthrow new Error(\n\t\t\t'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)',\n\t\t);\n\t}\n\n\tconst output = toUint8Array(input);\n\n\tswitch (outputType) {\n\t\tcase TypeOutput.Uint8Array:\n\t\t\treturn output as TypeOutputReturnType[T];\n\t\tcase TypeOutput.BigInt:\n\t\t\treturn uint8ArrayToBigInt(output) as TypeOutputReturnType[T];\n\t\tcase TypeOutput.Number: {\n\t\t\tconst bigInt = uint8ArrayToBigInt(output);\n\t\t\tif (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)',\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn Number(bigInt) as TypeOutputReturnType[T];\n\t\t}\n\t\tcase TypeOutput.PrefixedHexString:\n\t\t\treturn bytesToHex(output) as TypeOutputReturnType[T];\n\t\tdefault:\n\t\t\tthrow new Error('unknown outputType');\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}