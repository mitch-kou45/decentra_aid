{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.waitForTransactionReceipt = waitForTransactionReceipt;\nconst web3_errors_1 = require(\"web3-errors\");\n// eslint-disable-next-line import/no-cycle\nconst web3_utils_1 = require(\"web3-utils\");\n// eslint-disable-next-line import/no-cycle\nconst reject_if_block_timeout_js_1 = require(\"./reject_if_block_timeout.js\");\n// eslint-disable-next-line import/no-cycle\nconst rpc_method_wrappers_js_1 = require(\"../rpc_method_wrappers.js\");\nfunction waitForTransactionReceipt(web3Context, transactionHash, returnFormat, customGetTransactionReceipt) {\n  return __awaiter(this, void 0, void 0, function* () {\n    var _a;\n    const pollingInterval = (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval;\n    const [awaitableTransactionReceipt, IntervalId] = (0, web3_utils_1.pollTillDefinedAndReturnIntervalId)(() => __awaiter(this, void 0, void 0, function* () {\n      try {\n        return (customGetTransactionReceipt !== null && customGetTransactionReceipt !== void 0 ? customGetTransactionReceipt : rpc_method_wrappers_js_1.getTransactionReceipt)(web3Context, transactionHash, returnFormat);\n      } catch (error) {\n        console.warn('An error happen while trying to get the transaction receipt', error);\n        return undefined;\n      }\n    }), pollingInterval);\n    const [timeoutId, rejectOnTimeout] = (0, web3_utils_1.rejectIfTimeout)(web3Context.transactionPollingTimeout, new web3_errors_1.TransactionPollingTimeoutError({\n      numberOfSeconds: web3Context.transactionPollingTimeout / 1000,\n      transactionHash\n    }));\n    const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield (0, reject_if_block_timeout_js_1.rejectIfBlockTimeout)(web3Context, transactionHash);\n    try {\n      // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n      return yield Promise.race([awaitableTransactionReceipt, rejectOnTimeout,\n      // this will throw an error on Transaction Polling Timeout\n      rejectOnBlockTimeout // this will throw an error on Transaction Block Timeout\n      ]);\n    } finally {\n      if (timeoutId) clearTimeout(timeoutId);\n      if (IntervalId) clearInterval(IntervalId);\n      blockTimeoutResourceCleaner.clean();\n    }\n  });\n}","map":{"version":3,"names":["exports","waitForTransactionReceipt","web3_errors_1","require","web3_utils_1","reject_if_block_timeout_js_1","rpc_method_wrappers_js_1","web3Context","transactionHash","returnFormat","customGetTransactionReceipt","pollingInterval","_a","transactionReceiptPollingInterval","transactionPollingInterval","awaitableTransactionReceipt","IntervalId","pollTillDefinedAndReturnIntervalId","__awaiter","getTransactionReceipt","error","console","warn","undefined","timeoutId","rejectOnTimeout","rejectIfTimeout","transactionPollingTimeout","TransactionPollingTimeoutError","numberOfSeconds","rejectOnBlockTimeout","blockTimeoutResourceCleaner","rejectIfBlockTimeout","Promise","race","clearTimeout","clearInterval","clean"],"sources":["/home/ubuntu/node_modules/web3-eth/src/utils/wait_for_transaction_receipt.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport { TransactionPollingTimeoutError } from 'web3-errors';\nimport { EthExecutionAPI, Bytes, TransactionReceipt, DataFormat } from 'web3-types';\n\n// eslint-disable-next-line import/no-cycle\nimport { pollTillDefinedAndReturnIntervalId, rejectIfTimeout } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionReceipt } from '../rpc_method_wrappers.js';\n\nexport async function waitForTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n\tcustomGetTransactionReceipt?: (\n\t\tweb3Context: Web3Context<EthExecutionAPI>,\n\t\ttransactionHash: Bytes,\n\t\treturnFormat: ReturnFormat,\n\t) => Promise<TransactionReceipt>,\n): Promise<TransactionReceipt> {\n\tconst pollingInterval =\n\t\tweb3Context.transactionReceiptPollingInterval ?? web3Context.transactionPollingInterval;\n\n\tconst [awaitableTransactionReceipt, IntervalId] = pollTillDefinedAndReturnIntervalId(\n\t\tasync () => {\n\t\t\ttry {\n\t\t\t\treturn (customGetTransactionReceipt ?? getTransactionReceipt)(\n\t\t\t\t\tweb3Context,\n\t\t\t\t\ttransactionHash,\n\t\t\t\t\treturnFormat,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn('An error happen while trying to get the transaction receipt', error);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t},\n\t\tpollingInterval,\n\t);\n\n\tconst [timeoutId, rejectOnTimeout] = rejectIfTimeout(\n\t\tweb3Context.transactionPollingTimeout,\n\t\tnew TransactionPollingTimeoutError({\n\t\t\tnumberOfSeconds: web3Context.transactionPollingTimeout / 1000,\n\t\t\ttransactionHash,\n\t\t}),\n\t);\n\n\tconst [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = await rejectIfBlockTimeout(\n\t\tweb3Context,\n\t\ttransactionHash,\n\t);\n\n\ttry {\n\t\t// If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n\t\treturn await Promise.race([\n\t\t\tawaitableTransactionReceipt,\n\t\t\trejectOnTimeout, // this will throw an error on Transaction Polling Timeout\n\t\t\trejectOnBlockTimeout, // this will throw an error on Transaction Block Timeout\n\t\t]);\n\t} finally {\n\t\tif (timeoutId) clearTimeout(timeoutId);\n\t\tif (IntervalId) clearInterval(IntervalId);\n\t\tblockTimeoutResourceCleaner.clean();\n\t}\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAA,OAAA,CAAAC,yBAAA,GAAAA,yBAAA;AAVA,MAAAC,aAAA,GAAAC,OAAA;AAGA;AACA,MAAAC,YAAA,GAAAD,OAAA;AACA;AACA,MAAAE,4BAAA,GAAAF,OAAA;AACA;AACA,MAAAG,wBAAA,GAAAH,OAAA;AAEA,SAAsBF,yBAAyBA,CAC9CM,WAAyC,EACzCC,eAAsB,EACtBC,YAA0B,EAC1BC,2BAIgC;;;IAEhC,MAAMC,eAAe,GACpB,CAAAC,EAAA,GAAAL,WAAW,CAACM,iCAAiC,cAAAD,EAAA,cAAAA,EAAA,GAAIL,WAAW,CAACO,0BAA0B;IAExF,MAAM,CAACC,2BAA2B,EAAEC,UAAU,CAAC,GAAG,IAAAZ,YAAA,CAAAa,kCAAkC,EACnF,MAAWC,SAAA;MACV,IAAI;QACH,OAAO,CAACR,2BAA2B,aAA3BA,2BAA2B,cAA3BA,2BAA2B,GAAIJ,wBAAA,CAAAa,qBAAqB,EAC3DZ,WAAW,EACXC,eAAe,EACfC,YAAY,CACZ;MACF,CAAC,CAAC,OAAOW,KAAK,EAAE;QACfC,OAAO,CAACC,IAAI,CAAC,6DAA6D,EAAEF,KAAK,CAAC;QAClF,OAAOG,SAAS;MACjB;IACD,CAAC,GACDZ,eAAe,CACf;IAED,MAAM,CAACa,SAAS,EAAEC,eAAe,CAAC,GAAG,IAAArB,YAAA,CAAAsB,eAAe,EACnDnB,WAAW,CAACoB,yBAAyB,EACrC,IAAIzB,aAAA,CAAA0B,8BAA8B,CAAC;MAClCC,eAAe,EAAEtB,WAAW,CAACoB,yBAAyB,GAAG,IAAI;MAC7DnB;KACA,CAAC,CACF;IAED,MAAM,CAACsB,oBAAoB,EAAEC,2BAA2B,CAAC,GAAG,MAAM,IAAA1B,4BAAA,CAAA2B,oBAAoB,EACrFzB,WAAW,EACXC,eAAe,CACf;IAED,IAAI;MACH;MACA,OAAO,MAAMyB,OAAO,CAACC,IAAI,CAAC,CACzBnB,2BAA2B,EAC3BU,eAAe;MAAE;MACjBK,oBAAoB,CAAE;MAAA,CACtB,CAAC;IACH,CAAC,SAAS;MACT,IAAIN,SAAS,EAAEW,YAAY,CAACX,SAAS,CAAC;MACtC,IAAIR,UAAU,EAAEoB,aAAa,CAACpB,UAAU,CAAC;MACzCe,2BAA2B,CAACM,KAAK,EAAE;IACpC;EACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}