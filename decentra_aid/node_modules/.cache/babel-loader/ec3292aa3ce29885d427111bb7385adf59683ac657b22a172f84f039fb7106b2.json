{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNewPendingTransactionFilter = createNewPendingTransactionFilter;\nexports.createNewFilter = createNewFilter;\nexports.createNewBlockFilter = createNewBlockFilter;\nexports.uninstallFilter = uninstallFilter;\nexports.getFilterChanges = getFilterChanges;\nexports.getFilterLogs = getFilterLogs;\nconst web3_rpc_methods_1 = require(\"web3-rpc-methods\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst schemas_js_1 = require(\"./schemas.js\");\n/**\n * View additional documentations here: {@link Web3Eth.createNewPendingTransactionFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param returnFormat ({@link DataFormat}) Return format\n */\nfunction createNewPendingTransactionFilter(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.newPendingTransactionFilter(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createNewFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filter ({@link FilterParam}) Filter param optional having from-block to-block address or params\n * @param returnFormat ({@link DataFormat}) Return format\n */\nfunction createNewFilter(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n    if (!(0, web3_validator_1.isNullish)(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = (0, web3_utils_1.numberToHex)(toBlock);\n      }\n    }\n    if (!(0, web3_validator_1.isNullish)(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = (0, web3_utils_1.numberToHex)(fromBlock);\n      }\n    }\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield web3_rpc_methods_1.ethRpcMethods.newFilter(web3Context.requestManager, formattedFilter);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createNewBlockFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param returnFormat ({@link DataFormat}) Return format\n */\nfunction createNewBlockFilter(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.newBlockFilter(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.uninstallFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nfunction uninstallFilter(web3Context, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.uninstallFilter(web3Context.requestManager, (0, web3_utils_1.numberToHex)(filterIdentifier));\n    return response;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getFilterChanges}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nfunction getFilterChanges(web3Context, filterIdentifier, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getFilterChanges(web3Context.requestManager, (0, web3_utils_1.numberToHex)(filterIdentifier));\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return (0, web3_utils_1.format)(schemas_js_1.logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    });\n    return result;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getFilterLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nfunction getFilterLogs(web3Context, filterIdentifier, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getFilterLogs(web3Context.requestManager, (0, web3_utils_1.numberToHex)(filterIdentifier));\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return (0, web3_utils_1.format)(schemas_js_1.logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    });\n    return result;\n  });\n}","map":{"version":3,"names":["exports","createNewPendingTransactionFilter","createNewFilter","createNewBlockFilter","uninstallFilter","getFilterChanges","getFilterLogs","web3_rpc_methods_1","require","web3_utils_1","web3_validator_1","schemas_js_1","web3Context","returnFormat","response","ethRpcMethods","newPendingTransactionFilter","requestManager","format","defaultReturnFormat","filter","toBlock","fromBlock","isNullish","numberToHex","formattedFilter","Object","assign","newFilter","newBlockFilter","filterIdentifier","result","map","res","logSchema"],"sources":["/home/ubuntu/node_modules/web3-eth/src/filtering_rpc_method_wrappers.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { DataFormat, EthExecutionAPI, Numbers, Log, FilterParams } from 'web3-types';\nimport { format, numberToHex } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\nimport { logSchema } from './schemas.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.createNewPendingTransactionFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param returnFormat ({@link DataFormat}) Return format\n */\nexport async function createNewPendingTransactionFilter<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.newPendingTransactionFilter(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createNewFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filter ({@link FilterParam}) Filter param optional having from-block to-block address or params\n * @param returnFormat ({@link DataFormat}) Return format\n */\nexport async function createNewFilter<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tfilter: FilterParams,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.newFilter(web3Context.requestManager, formattedFilter);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createNewBlockFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param returnFormat ({@link DataFormat}) Return format\n */\nexport async function createNewBlockFilter<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.newBlockFilter(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.uninstallFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nexport async function uninstallFilter(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tfilterIdentifier: Numbers,\n) {\n\tconst response = await ethRpcMethods.uninstallFilter(\n\t\tweb3Context.requestManager,\n\t\tnumberToHex(filterIdentifier),\n\t);\n\n\treturn response;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getFilterChanges}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nexport async function getFilterChanges<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tfilterIdentifier: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getFilterChanges(\n\t\tweb3Context.requestManager,\n\t\tnumberToHex(filterIdentifier),\n\t);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(\n\t\t\tlogSchema,\n\t\t\tres as unknown as Log,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getFilterLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nexport async function getFilterLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tfilterIdentifier: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getFilterLogs(\n\t\tweb3Context.requestManager,\n\t\tnumberToHex(filterIdentifier),\n\t);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(\n\t\t\tlogSchema,\n\t\t\tres as unknown as Log,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t);\n\t});\n\n\treturn result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}